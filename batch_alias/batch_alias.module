<?php

/**
 * @file
 * This module provides ability to alias content through Drupal's Batch API.
 */
 
/**
 * Implements hook_help().
 */
function batch_alias_help($path, $arg) {
  switch ($path) {
    case 'admin/help#batch_alias':
      return '<p>' . t('This module provides the option of aliasing content through the Batch API in Drupal. In general for long running processes, Batch API uses ajax calls to send in new requests preventing server time out. In case javascript is disabled in the browser Batch API uses meta refresh tags') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function batch_alias_permission() {
  return array(
    'configure batch alias settings' => array(
      'title' => t('Configure batch aliasing settings'),
      'description' => t('Configure settings for Batch aliasing of content'),
    ),
    'run batch aliasing' => array(
      'title' => t('Run batch aliasing of content'),
      'description' => t('Run batch operation for aliasing of content'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function batch_alias_menu() {
  $items = array();
  $items['admin/config/development/batch_alias'] = array(
    'title' => 'Configure Batch Alias Settings',
    'description' => 'Select which content type needs to be aliased and other granular settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_alias_settings_form'),
    'access arguments' => array('configure batch alias settings'),
  );
  $items['admin/config/development/batch_alias/settings'] = array(
    'title' => 'Batch Alias Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/development/batch_alias/run_alias'] = array(
    'title' => 'Run batch alias',
    'description' => 'Trigger batch aliasing of content as per the aliasing settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('run_batch_aliasing_form'),
    'access arguments' => array('run batch aliasing'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Form builder for the alias settings option form
 */
function batch_alias_settings_form() {
  $aliasable_content_types = get_aliasable_content_type();
  $form = array();
  $form['batch_settings'] = array(
    '#title' => t('Batch Alias Settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#description' => t('Choose the content types and settings for the batch URL aliasing process. If a content type is disabled it implies there are no nodes to alias in it.'),
  );
  if (count($aliasable_content_types)) {
    $content_types = array();
    foreach ($aliasable_content_types as $content_type => $content_name) {
      $content_types[] = $content_type;
      $form['batch_settings'][$content_type] = array(
        '#type' => 'checkbox',
        '#title' => $content_name,
        '#disabled' => !(node_exists_for_type($content_type)),
        '#default_value' => variable_get('batch_alias_' . $content_type, 0),
      );
    }
  }
  $form['batch_settings']['all_content_types'] = array(
    '#type' => 'hidden',
    '#value' => $content_types,
  );
  $form['#submit'][] = 'batch_alias_settings_form_submit';
  return system_settings_form($form);
}

/**
 * Submission handler for the batch alias settings form
 * @see batch_alias_settings_form().
 */
function batch_alias_settings_form_submit($form, &$form_state) {
  $submitted_settings = $form_state['values'];
  $content_type_info = $submitted_settings['all_content_types'];
  if (count($content_type_info)) {
    foreach ($content_type_info as $content_type_name) {
      variable_set('batch_alias_' . $content_type_name, $submitted_settings[$content_type_name]);
    }
  }
}
 
/**
 * Helper function to return content types applicable for aliasing to generate checkboxes in batch alias settings form
 *
 * @return
 *  associative array of format $arr['node_type_machine_name'] = 'Node Type Human readable name'
 */
function get_aliasable_content_type() {
  $node_types = array();
  $node_types_obj_arr = node_type_get_types();
  $node_types_arr = array_keys($node_types_obj_arr);
  foreach ($node_types_arr as $num_idx => $node_type) {
    $node_types[$node_type] = $node_types_obj_arr[$node_type]->name;
  }
  // check if all node types can be aliased, (i-e)
  // if there's a general pattern for content then TRUE, else only those node types with a specific alias pattern qualify
  $node_pattern_exists = variable_get('pathauto_node_pattern', '');
  if ($node_pattern_exists) {
    return $node_types;
  }
  foreach ($node_types_arr as $node_type) {
    if (!variable_get('pathauto_node_' . $node_type . '_pattern', '')) {
      unset($node_types[$node_type]);
    }
  }
  return $node_types;
}

/**
 * Function to check if nodes exist for given content type and return an appropriate flag
 *
 * @param
 *  $content_type - the content type to check for nodes
 * @return
 *  $exists - TRUE if nodes present for the content type, FALSE otherwise 
 */
function node_exists_for_type($content_type) {
  // check for a single node rather than a count query which might prove costly for heavy database with large content
  $exists = TRUE;
  $nodes_exists_qry = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('type', $content_type);
  $nodes_exist = $nodes_exists_qry
  ->range(0, 1)
  ->execute()
  ->fetchField();
  if (empty($nodes_exist) || $nodes_exist == '0') {
    $exists = FALSE;
  }
  return $exists;
}

/**
 * Form builder to get user confirmation to start running the node aliasing with Batch API
 */
function run_batch_aliasing_form() {
  $form = array();
  $form['#submit'][] = 'run_batch_alias';
  $question = t("Are you sure you want to run Batch aliasing of content?");
  $description = t("This might take long and depends on the quantity of content in your site and your URL alias settings. This action cannot be undone.");
  $path = "admin/config/development/batch_alias";
  return confirm_form($form, $question, $path, $description, $yes = "Confirm", $no = "Cancel", $name = "batch_alias_confirm");
}

/**
 * Function to trigger the batch aliasing process
 */
function run_batch_alias() {
  $aliasible_node_types = get_aliasable_content_type();
  $operations = array();
  foreach ($aliasible_node_types as $type => $name) {
    if (variable_get('batch_alias_' . $type, 0)) {
      $total = db_query("SELECT COUNT(nid) FROM {node} WHERE `type` = :type AND status = :status", array(":type" => $type, ":status" => 1))->fetchField();
      if ($total) {
        $operations[] = array('batch_alias_generate_alias', array($type, $name, $total));
      }      
    }
  }
  $batch = array(
    'init_message' => t('Starting alias generation'),
    'title' => t('Content Aliasing'),
    'operations' => $operations,
    'finished' => 'batch_alias_complete',
  );
  batch_set($batch);
}

/**
 * Function to generate the respective alias for content types
 */
function batch_alias_generate_alias($node_type, $name, $total_count, &$context) {
  $count = 10;
  $nids = array();
  /*$nodes_fetch_qry = db_select('node', 'n')
  ->fields(n, array(nid))
  ->condition('type', $content_type)
  ->condtion('status', 1)
  ->range($offset, $limit);*/
  $nodes_select = "SELECT `nid` FROM {node} WHERE `type` = :node_type AND `status` = :node_status";
  for ($offset = 0; $offset <= $total_count; $offset += $count) {
    $nodes_fetch_result = db_query_range($nodes_select, $offset, $count, array(':node_type' => $node_type, ':node_status' => 1));
    foreach ($nodes_fetch_result as $nodes ) {
      $nids[] = $nodes->nid;
    }
    if (count($nids)) {
      pathauto_node_update_alias_multiple($nids, $op = 'bulkupdate', $options = array());
      unset($nids);
    }
    else {
      $context['finished'] = 1;
    }
  }
  $context['finished'] = 1;
}

/**
 * Function called at the end of the aliasing process
 */
function batch_alias_complete($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('It is over, it is done'));
  }
  else {
    drupal_set_message(t('Oh snap!'));
  }
}