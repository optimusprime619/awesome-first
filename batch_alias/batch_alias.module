<?php

/**
 * @file
 * This module provides ability to alias content through Drupal's Batch API.
 */

/**
 * Implements hook_help().
 */
function batch_alias_help($path, $arg) {
  switch ($path) {
    case 'admin/help#batch_alias':
      return '<p>' . t('This module provides the option of aliasing content through the Batch API in Drupal. In general for long running processes, Batch API uses ajax calls to send in new requests preventing server time out. In case javascript is disabled in the browser Batch API uses meta refresh tags') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function batch_alias_permission() {
  return array(
    'configure batch alias settings' => array(
      'title' => t('Configure batch aliasing settings'),
      'description' => t('Configure settings for Batch aliasing of content'),
    ),
    'run batch aliasing' => array(
      'title' => t('Run batch aliasing of content'),
      'description' => t('Run batch operation for aliasing of content'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function batch_alias_menu() {
  $items = array();
  $items['admin/config/development/batch_alias'] = array(
    'title' => 'Configure Batch Alias Settings & Run Batch Alias',
    'description' => 'Select which content type needs to be aliased and other granular settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_alias_settings_form'),
    'access arguments' => array('configure batch alias settings'),
    'file' => 'batch_alias.inc',
  );
  $items['admin/config/development/batch_alias/settings'] = array(
    'title' => 'Batch Alias Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'batch_alias.inc',
  );
  $items['admin/config/development/batch_alias/run_alias'] = array(
    'title' => 'Run batch alias',
    'description' => 'Trigger batch aliasing of content as per the aliasing settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('run_batch_aliasing_form'),
    'access arguments' => array('run batch aliasing'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'batch_alias.inc',
  );
  return $items;
}

/**
 * Return content types applicable for aliasing in batch alias settings form.
 * @return
 * associative array of format $arr['node_type_machine_name'] = 'Node Type Human readable name' eligible for being aliased
 */
function get_aliasable_content_type() {
  $node_types = array();
  $node_types_obj_arr = node_type_get_types();
  $node_types_arr = array_keys($node_types_obj_arr);
  foreach ($node_types_arr as $num_idx => $node_type) {
    $node_types[$node_type] = $node_types_obj_arr[$node_type]->name;
  }
  // Check if all node types can be aliased, (i-e)
  // If there's a general pattern for content then TRUE, else only those node types with a specific alias pattern qualify
  $node_pattern_exists = variable_get('pathauto_node_pattern', '');
  if ($node_pattern_exists) {
    return $node_types;
  }
  foreach ($node_types_arr as $node_type) {
    if (!variable_get('pathauto_node_' . $node_type . '_pattern', '')) {
      unset($node_types[$node_type]);
    }
  }
  return $node_types;
}

/**
 * Check if nodes exist for given content type and return appropriate flag.
 * @param
 * content_type - the content type to check for nodes
 *
 * @return
 *  exists - boolean TRUE if nodes present for the content type, FALSE otherwise
 */
function node_exists_for_type($content_type) {
  // Check for single node rather than count query, 
  // Which might prove costly for heavy database with large content.
  $exists = TRUE;
  $nodes_exists_qry = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('type', $content_type);
  $nodes_exist = $nodes_exists_qry
  ->range(0, 1)
  ->execute()
  ->fetchField();
  if (empty($nodes_exist) || $nodes_exist == '0') {
    $exists = FALSE;
  }
  return $exists;
}

/**
 * Function to generate the respective alias for content types.
 *
 * @param
 *  $node_type - the machine name of the node type
 *  $name - the human readable name of node type
 *  $total_count - the total number of published nodes of a node type
 *  $context - the context array provided by the Batch API
 */
function batch_alias_generate_node_alias($node_type, $name, $total_count, &$context) {
  $count = 10;
  $nids = array();
  /*$nodes_fetch_qry = db_select('node', 'n')
  ->fields(n, array(nid))
  ->condition('type', $content_type)
  ->condtion('status', 1)
  ->range($offset, $limit);*/
  if (!isset($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['results'] = array();
  }
  $sandbox = &$context['sandbox'];
  if (!isset($sandbox[$node_type])) {
    $sandbox['progress'] = 0;
  }
  $nodes_select = "SELECT `nid` FROM {node} WHERE `type` = :node_type AND `status` = :node_status";
  for ($offset = 0; $offset <= $total_count; $offset += $count) {
    $nodes_fetch_result = db_query_range($nodes_select, $offset, $count, array(':node_type' => $node_type, ':node_status' => 1));
    foreach ($nodes_fetch_result as $nodes) {
      $nids[] = $nodes->nid;
    }
    $added_nodes = count($nids);
    if ($added_nodes) {
      $sandbox['progress'] += $added_nodes;
      pathauto_node_update_alias_multiple($nids, $op = 'bulkupdate', $options = array());
      $context['message'] = t('@name: Processed %progress of %total', array(
        '@name' => $name,
        '%progress' => $sandbox['progress'],
        '%total' => $total_count)
      );
      unset($nids);
    }
  }
  $context['finished'] = 1;
  $batch_results = &$context['results'];
  $batch_results['types'][] = $node_type; 
  $batch_results[$node_type] = t('%count of %total nodes processed for type @name', array(
    '%count' => $sandbox['progress'],
    '%total' => $total_count, '@name' => $name)
  );
  $batch_results['grandtotal_nodes'] = isset($batch_results['grandtotal_nodes']) ? $batch_results['grandtotal_nodes'] : 0;
  $batch_results['grandtotal_nodes'] += $sandbox['progress'];
  watchdog('batch_alias', '%count of %total nodes processed for type @type', array('%count' => $sandbox['progress'], '%total' => $total_count, '@type' => $node_type));
}

/**
 * Function to generate user alias in batch.
 */
function batch_alias_generate_user_alias($users_count, &$context) {
  $count = 10;
  $uids = array();
  if (!isset($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['results'] = array();
  }
  $sandbox = &$context['sandbox'];
  if (empty($sandbox)) {
    $sandbox['progress'] = 0;
  }
  $users_select = "SELECT `uid` FROM {users} WHERE uid > 0";
  for ($offset = 0; $offset <= $users_count; $offset += $count) {
    $users_fetch_rs = db_query_range($users_select, $offset, $count);
    foreach ($users_fetch_rs as $users) {
      $uids[] = $users->uid;
    }
    $added_users = count($uids);
    if ($added_users) {
      $sandbox['progress'] += $added_users;
      pathauto_user_update_alias_multiple($uids, $op = 'bulkupdate');
      $context['message'] = t('User Aliasing: Processed %progress of %total', array('%progress' => $sandbox['progress'], '%total' => $users_count));
      unset($uids);
    }
  }
  $context['finished'] = 1;
  $batch_results = &$context['results'];
  $batch_results['grandtotal_users'] = isset($batch_results['grandtotal_users']) ? $batch_results['grandtotal_users'] : 0;
  $batch_results['grandtotal_users'] += $sandbox['progress'];
  $batch_results['user_aliasing_result'] = t('%count of %total users aliased', array('%count' => $sandbox['progress'], '%total' => $users_count));
  watchdog('batch_alias', '%count of %total users aliased', array('%count' => $sandbox['progress'], '%total' => $users_count));
}

/**
 * Success callback for the batch aliasing process.
 * @see run_batch_alias()
 */
function batch_alias_complete($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Batch alias generation complete.'));
    if (count($results['types'])) {
      foreach ($results['types'] as $node_type) {
        drupal_set_message($results[$node_type]);
      }
      drupal_set_message(t('Grand total of number of nodes aliased: %grandtotal_nodes', array(
        '%grandtotal_nodes' => $results['grandtotal_nodes'])
      
      ));
      watchdog('batch_alias', 'Grand total of number of nodes aliased: %grandtotal_nodes', array(
        '%grandtotal_nodes' => $results['grandtotal_nodes'],
      ));
    }
    if (isset($results['grandtotal_users'])) {
      drupal_set_message($results['user_aliasing_result']);
      drupal_set_message(t('Grand total of number of users aliased: %grandtotal_users', array(
        '%grandtotal_users' => $results['grandtotal_users'],
      )));
      watchdog('batch_alias', 'Grand total of number of users aliased: %grandtotal_users', array(
        '%grandtotal_users' => $results['grandtotal_users'],
      ));
    }
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
                '%error_operation' => $error_operation[0],
                '@arguments' => print_r($error_operation[1], TRUE),
              ));
    drupal_set_message($message, 'error')
  }
}
